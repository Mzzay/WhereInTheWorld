[{"C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\App.tsx":"1","C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\components\\topbar.tsx":"2","C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\screens\\home\\index.tsx":"3","C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\components\\colors.ts":"4","C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\components\\request.ts":"5","C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\screens\\details\\index.tsx":"6","C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\reportWebVitals.ts":"7","C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\index.tsx":"8"},{"size":1389,"mtime":1606825645662,"results":"9","hashOfConfig":"10"},{"size":979,"mtime":1607188602867,"results":"11","hashOfConfig":"10"},{"size":6292,"mtime":1607186437109,"results":"12","hashOfConfig":"10"},{"size":284,"mtime":1607183357924,"results":"13","hashOfConfig":"10"},{"size":637,"mtime":1606825757091,"results":"14","hashOfConfig":"10"},{"size":4021,"mtime":1607184088646,"results":"15","hashOfConfig":"10"},{"size":425,"mtime":1606150079480,"results":"16","hashOfConfig":"10"},{"size":478,"mtime":1606586792714,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1m7mt1z",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\App.tsx",[],["37","38"],"C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\components\\topbar.tsx",[],"C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\screens\\home\\index.tsx",[],"C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\components\\colors.ts",[],"C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\components\\request.ts",[],"C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\screens\\details\\index.tsx",["39"],"import React, { useEffect, useState } from 'react'\r\nimport { FaArrowLeft } from 'react-icons/fa'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { colors } from '../../components/colors'\r\nimport Countries from '../../components/request'\r\nimport { ICountry } from '../../components/types'\r\n\r\ninterface Props {\r\n    mode : string;\r\n}\r\n\r\nexport default function Details({ mode }: Props) {\r\n\r\n    const [ data, setData ] = useState<ICountry | null>(null)\r\n    const [ error, setError ] = useState(false)\r\n    const { name }: { name: string } = useParams()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const getCountryByCode = async () => {\r\n            const res: ICountry[] = await Countries.getByName(name)\r\n            console.log(res)\r\n            if (res) {\r\n                setData(res[0])\r\n            }else{\r\n                setError(true)\r\n            }\r\n        }\r\n        getCountryByCode()\r\n    },[name])\r\n\r\n    return (\r\n        <main className=\"details-container\">\r\n            <div className=\"back-button shadow-box\"\r\n                onClick={() => history.goBack()}\r\n                style={{\r\n                        color : mode === \"light\" ? colors.dark_mode_element : colors.white,\r\n                        backgroundColor: mode === \"light\" ? colors.white : colors.dark_mode_element\r\n                    }}>\r\n                <p><FaArrowLeft size={23} /> Back</p>\r\n            </div>\r\n            <section>\r\n                <div className=\"flag-container\">\r\n                    <img src={data?.flag} alt={data?.name} />\r\n                </div>\r\n                <div\r\n                    className=\"info-container\"\r\n                    style={{\r\n                        color : mode === \"light\" ? colors.dark_mode_background : colors.white,\r\n                    }}\r\n                >\r\n                    <h2>{data?.name}</h2>\r\n                    <div className=\"info-content\">\r\n                        <div className=\"info-left\">\r\n                            <p><span>Native Name: </span>{data?.nativeName}</p>\r\n                            <p><span>Population: </span>{data?.population}</p>\r\n                            <p><span>Region: </span>{data?.region}</p>\r\n                            <p><span>Sub Region: </span>{data?.subregion}</p>\r\n                            <p><span>Capital: </span>{data?.capital}</p>\r\n                        </div>\r\n                        <div className=\"info-right\">\r\n                            <p><span>Top Level Domain: </span>{data?.topLevelDomain}</p>\r\n                            <p><span>Currencies: </span>{data?.currencies.map(c => c.code).join(',')}</p>\r\n                            <p><span>Currencies: </span>{data?.languages.map(l => l.name).join(',')}</p>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        data?.borders && data.borders.length > 0  && (\r\n                            <div className=\"info-content\">\r\n                                <p id=\"border-subtitle\">Border Countries: </p>\r\n                                <div className=\"border-container\">\r\n                                    {\r\n                                        data?.borders.map((b: string, i: number) => {\r\n                                            return <BorderComponent country={b} key={i} mode={mode} />\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n\r\nfunction BorderComponent({ country, mode }: { country: string, mode: string }) {\r\n    return (\r\n        <div className=\"name-country-box shadow-box\"\r\n            style={{ backgroundColor: mode === \"light\" ? colors.white : colors.dark_mode_element, color: mode === \"light\" ? colors.dark_mode_element : colors.white }}\r\n        >\r\n            { country }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\reportWebVitals.ts",[],["40","41"],"C:\\Users\\anisc\\Documents\\projets\\countries\\countries\\src\\index.tsx",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":15,"column":13,"nodeType":"48","messageId":"49","endLine":15,"endColumn":18},{"ruleId":"42","replacedBy":"50"},{"ruleId":"44","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar",["52"],["53"],"no-global-assign","no-unsafe-negation"]